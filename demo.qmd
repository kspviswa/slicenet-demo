---
title: "Slicenet Demo"
format: 
  dashboard:
    orientation: rows
    theme: sketchy
    logo: slicenet-1-tr-logo.png
---

#  {.sidebar}

![](slicenet-1-tr-logo.png) <br> <br> <a href="https://kspviswa.github.io/slicenet-demo"> return to homepage</a>

# Slicelet Admissions

## Row 1

::: {.valuebox icon="speedometer2"}
Total number of slicelets

100
:::

::: {.valuebox icon="stoplights"}
Traffic Patterns

3
:::

::: {.valuebox icon="pie-chart"}
Service Types

2
:::

::: {.valuebox icon="bucket"}
Slicelet / Service ratio

2
:::

## Row 2

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

df2 = pd.read_csv('csv/file2.csv')
df3 = pd.read_csv('csv/file3.csv')
df4 = pd.read_csv('csv/file4.csv')
df5 = pd.read_csv('csv/file5.csv')
df6 = pd.read_csv('csv/file6_normal_20_80.csv')
df7 = pd.read_csv('csv/file7_normal_50_50.csv')


# df2 is exponential with 50-50
df2_admitted = df2[df2['Admitted?'] == True]
df2_admitted_count = df2_admitted['Admitted?'].sum()

# df3 is default with 50-50
df3_admitted = df3[df3['Admitted?'] == True]
df3_admitted_count = df3_admitted['Admitted?'].sum()

#df4 is exponential with 20-80
df4_admitted = df4[df4['Admitted?'] == True]
df4_admitted_count = df4_admitted['Admitted?'].sum()

#df5 is default with 20-80
df5_admitted = df5[df5['Admitted?'] == True]
df5_admitted_count = df5_admitted['Admitted?'].sum()

#df6 is normal with 20-80
df6_admitted = df6[df6['Admitted?'] == True]
df6_admitted_count = df6_admitted['Admitted?'].sum()

#df7 is normal with 50-80
df7_admitted = df7[df7['Admitted?'] == True]
df7_admitted_count = df7_admitted['Admitted?'].sum()

comparison = {'# slicelets admitted' : [df2_admitted_count, df3_admitted_count, df7_admitted_count, df4_admitted_count, df5_admitted_count, df6_admitted_count], 'experiments' : ['Experiment 1', 'Experiment 2', 'Experiment 5', 'Experiment 3', 'Experiment 4', 'Experiment 6'], 'traffic pattern' : ['exponential', 'default', 'normal', 'exponential', 'default', 'normal'], 'service weightage' : ['50/50', '50/50', '50/50', '20/80', '20/80', '20/80'] }
final_df = pd.DataFrame(comparison)

fig = px.bar(final_df, x="experiments", y="# slicelets admitted", color="traffic pattern", pattern_shape="service weightage", text_auto = True)

legend=dict(
    yanchor="top",
    y=0.99,
)

fig.update_layout(title = "Slicelet Admitted Count by Experiment Type", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title=None, showlegend=False)

```

### Experiment Details

| **Experiment \#** | **Gold Service %** | **Silver Service %** | **Slicelet Delay Pattern** |
|-----------------|-----------------|-----------------|---------------------|
| **Experiment 1**  | 50                 | 50                   | Exponential                |
| **Experiment 2**  | 20                 | 80                   | Exponential                |
| **Experiment 3**  | 50                 | 50                   | Default                    |
| **Experiment 4**  | 20                 | 80                   | Default                    |
| **Experiment 5**  | 50                 | 50                   | Normal                     |
| **Experiment 6**  | 20                 | 80                   | Normal                     |

: `Experiment Details`

# Slicelet Admission Delay

## Row 1 {.tabset}

```{python}
#| title: Experiment 1
def showBar(df, name):
  theFig = px.bar(df, x="Name", y="Overall Delay(sec)")
  theFig.update_layout(title = f"Admitted Slicelet Delays for {name}", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', showlegend = True)
  theFig.update_traces(marker_color='red')
  theFig.show()

#| title: Experiment 1
#fig_a = px.line(df2_admitted, x="Name", y="Overall Delay(sec)", markers=True)
#fig_a = px.bar(df2_admitted, x="Name", y="Overall Delay(sec)")
#fig_a.update_layout(title = "Admitted Slicelet Delays for Experiment 1", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
#fig.update_traces(marker_color=['green' if y <= 5 else 'red' for y in df2_admitted ['Overall Delay(sec)']])

showBar(df2_admitted, 'Experiment 1')

```

```{python}
#| title: Experiment 2
# fig_b = px.bar(df3_admitted, x="Name", y="Overall Delay(sec)")
# fig_b.update_layout(title = "Admitted Slicelet Delays for Experiment 2", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
showBar(df3_admitted, 'Experiment 2')
```

```{python}
#| title: Experiment 3
# fig_c = px.bar(df7_admitted, x="Name", y="Overall Delay(sec)")
# fig_c.update_layout(title = "Admitted Slicelet Delays for Experiment 3", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
showBar(df7_admitted, 'Experiment 3')
```

```{python}
#| title: Experiment 4
# fig_d = px.bar(df4_admitted, x="Name", y="Overall Delay(sec)")
# fig_d.update_layout(title = "Admitted Slicelet Delays for Experiment 4", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
showBar(df4_admitted, 'Experiment 4')
```

```{python}
#| title: Experiment 5
# fig_e = px.bar(df5_admitted, x="Name", y="Overall Delay(sec)")
# fig_e.update_layout(title = "Admitted Slicelet Delays for Experiment 5", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
showBar(df5_admitted, 'Experiment 5')
```

```{python}
#| title: Experiment 6
# fig_f = px.bar(df6_admitted, x="Name", y="Overall Delay(sec)")
# fig_e.update_layout(title = "Admitted Slicelet Delays for Experiment 6", uniformtext_minsize=8, uniformtext_mode='hide', xaxis_title='Slicelet name', legend=legend)
showBar(df6_admitted, 'Experiment 6')
```
